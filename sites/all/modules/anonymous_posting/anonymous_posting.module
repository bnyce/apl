<?php

/**
 * @file
 */
/**
 * Anonyous field name
 */
define('ANONYMOUS_POSTING_FIELD_NAME', 'field_anonymous_author');

/**
 * Anonymous posters cannot enter their contact information.
 */
define('ANONYMOUS_POSTING_MAYNOT_CONTACT', 0);

/**
 * Anonymous posters may leave their contact information.
 */
define('ANONYMOUS_POSTING_MAY_CONTACT', 1);

/**
 * Anonymous posters are required to leave their contact information.
 */
define('ANONYMOUS_POSTING_MUST_CONTACT', 2);

/**
 * Implements hook_menu().
 */
function anonymous_posting_menu() {

  $access = array('administer anonymous_posting');

  $items['admin/config/people/anonymous-posting'] = array(
    'title' => 'Anonymous Posting',
    'description' => 'Allow anonymous user to submit their contact informations while posting contents.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('anonymous_posting_admin_form'),
    'access arguments' => $access,
    'file' => 'anonymous_posting.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function anonymous_posting_permission() {

  $out = array();

  // Admin page permission
  $out['administer anonymous_posting'] = array(
    'title' => t('Administer Anonymous Posting settings'),
  );

  return $out;
}

/**
 * Implements hook_help().
 */
function anonymous_posting_help($path, $arg) {
  switch ($path) {
    case 'admin/help#anonymous_posting':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The <em>Anonymous Posting</em> module allows anonymous users to submit their contact informations (name, mail and homepage) while posting content.</p>');
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Allow anonymous users to submit their <em>contact informations</em>') . '</dt>';
      $output .= '<dd>' . t('You must enable this feature on a content type basis. To do so go to the admin page of !l.', array(
          '!l' => l(t('Anonymous Posting'), 'admin/config/people/anonymous-posting'))) . '</dd>';
      $output .= '<dt>' . t('Caution when uninstalling the module') . '</dt>';
      $output .= '<dd>' . t('Uninstalling the module will delete any data related to the Anonymous Posting module, including the author\'s field columns (name, mail, homepage and hostname).') . '</dd>';
      $output .= '<dt>' . t('Caution about the core Node module and its permissions') . '</dt>';
      $output .= '<dd>' . t('The following is unrelated to what bring the Anonymous Posting module but it is a reminder of how the core Node module works: When setting the "edit/delete own content" permissions to anonymous users you allow them to edit/delete any anonymous content.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_field_info().
 */
function anonymous_posting_field_info() {
  return array(
    'anonymous_author' => array(
      'label' => t('Anonymous contact informations'),
      'description' => t('Contact information to be filled by anonymous users'),
      'default_widget' => 'anonymous_author',
      'default_formatter' => 'anonymous_author',
      'no_ui' => TRUE,
    ),
  );
}

/**
 * Implements hook_field_is_empty().
 */
function anonymous_posting_field_is_empty($item, $field) {
  // Consider the field empty only if all columns are empty
  $out = TRUE;
  foreach ($item as $column_name => $columns_value) {
    $out = $out && $item[$column_name] === '';
  }
  return $out;
}

/**
 * Implements hook_field_widget_info().
 */
function anonymous_posting_field_widget_info() {
  return array(
    'anonymous_author' => array(
      'label' => t('Anonymous author fields widget'),
      'field types' => array('anonymous_author'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function anonymous_posting_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if ($instance['widget']['type'] == 'anonymous_author') {

    // Hide fields to registered user.
    if (!user_access('administer anonymous_posting') && (!user_is_anonymous())) {
      return $element;
    }

    $value = isset($items[$delta]) ? $items[$delta] : array();

    if (!user_is_anonymous()) {
      $element = array(
        '#type' => 'fieldset',
        '#description' => t('Contact informations intend to be filled by anonymous users.'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'additional_settings',
        '#attributes' => array(
          'class' => array('anonmyous_posting-node-edit-form-contact_informations'),
        ),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'anonymous_posting') . '/anonymous_posting.js',
            array(
              'type' => 'setting',
              'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
            ),
          ),
        ),
        '#weight' => 91, // Place the fieldset under the Author core fieldset.
        ) + $element;
    }
    else {
      // fill contact fields with cookie values:
      drupal_add_js(drupal_get_path('module', 'anonymous_posting') . '/anonymous_posting.form.js');
      $form['#attached']['library'][] = array('system', 'jquery.cookie');
      $form['#attributes']['class'][] = 'user-info-from-cookie';
    }

    $anonymous_posting = variable_get('anonymous_posting_setting_type_' . $form['#node']->type, ANONYMOUS_POSTING_MAYNOT_CONTACT);

    // Create form elements:
    $element['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Your name'),
      '#size' => 64,
      '#maxlength' => 60,
      '#default_value' => isset($value['name']) ? $value['name'] : '',
      '#required' => ($anonymous_posting == ANONYMOUS_POSTING_MUST_CONTACT) && user_is_anonymous(),
      '#description' => user_is_anonymous() ? '' : t('The filled string will be displayed in favor of the %aname string.', array('%aname' => variable_get('anonymous', t('Anonymous')))),
    );
    if ($anonymous_posting >= ANONYMOUS_POSTING_MAY_CONTACT) {
      $element['mail'] = array(
        '#type' => 'textfield',
        '#title' => t('E-Mail'),
        '#description' => t('The content of this field is kept private and will not be shown publicly.'),
        '#size' => 64,
        '#maxlength' => 64,
        '#default_value' => isset($value['mail']) ? $value['mail'] : '',
        '#required' => ($anonymous_posting == ANONYMOUS_POSTING_MUST_CONTACT) && user_is_anonymous(),
      );
      $element['homepage'] = array(
        '#type' => 'textfield',
        '#title' => t('Homepage'),
        '#size' => 64,
        '#maxlength' => 255,
        '#default_value' => isset($value['homepage']) ? $value['homepage'] : '',
        '#required' => FALSE,
      );
    }
    if (empty($form['#node']->nid) && user_is_anonymous()) {
      // Record hostname while creating new node:
      $element['hostname'] = array(
        '#type' => 'hidden',
        '#value' => ip_address(),
      );
    }
  }

  return $element;
}

/**
 * Implements hook_field_validate().
 */
function anonymous_posting_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  if ($instance['widget']['type'] == 'anonymous_author') {
    $fields = current($items);
    $author_name = isset($fields['name']) ? $fields['name'] : '';
    $author_mail = isset($fields['mail']) ? $fields['mail'] : '';
    $author_homepage = isset($fields['homepage']) ? $fields['homepage'] : '';

    // Save the anonymous user information to a cookie for reuse.
    user_cookie_save(array(
      'name' => $author_name,
      'mail' => $author_mail,
      'homepage' => $author_homepage,
    ));

    // Validate anonymous comment author fields.
    // If the (original) author of this node was an anonymous user, verify
    // that no registered user with this name exists.
    if ($author_name) {
      $query = db_select('users', 'u');
      $query->addField('u', 'uid', 'uid');
      $taken = $query
        ->condition('name', db_like($author_name), 'LIKE')
        ->countQuery()
        ->execute()
        ->fetchField();
      if ($taken) {
        form_set_error('name', t('The name you used belongs to a registered user.'));
      }
    }

    if ($author_mail && !valid_email_address($author_mail)) {
      form_set_error(ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][mail', t("The e-mail address you specified is not valid."));
    }

    if ($author_homepage && !valid_url($author_homepage, TRUE)) {
      form_set_error(ANONYMOUS_POSTING_FIELD_NAME . '][' . LANGUAGE_NONE . '][0][homepage', t('The URL of your homepage is not valid. Remember that it must be fully qualified, i.e. of the form <code>http://example.com/directory</code>.'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function anonymous_posting_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  // Add the field 'Anonymous <node type> posting' in the node content type form
  if (_anonymous_posting_activated($form['#node_type']->type) && isset($form['type'])) {
    $setting_options = array(
      ANONYMOUS_POSTING_MAYNOT_CONTACT => t('Anonymous posters may not enter their contact information'),
      ANONYMOUS_POSTING_MAY_CONTACT => t('Anonymous posters may leave their contact information'),
      ANONYMOUS_POSTING_MUST_CONTACT => t('Anonymous posters must leave their contact information'),
    );
    $setting_default_value = variable_get('anonymous_posting_setting_type_' . $form['#node_type']->type, ANONYMOUS_POSTING_MAYNOT_CONTACT);

    $form['anonymous_posting'] = array(
      '#type' => 'fieldset',
      '#title' => t('Anonymous posting'),
      '#group' => 'additional_settings',
      '#collapsible' => TRUE,
      '#attributes' => array(
        'class' => array('anonmyous_posting-node-type-edit-form-contact_informations'),
      ),
      '#attached' => array(
        'js' => array(
          drupal_get_path('module', 'anonymous_posting') . '/anonymous_posting.js',
          array(
            'type' => 'setting',
            'data' => array(
              'anonymous_posting_options' => $setting_options,
              'anonymous_posting_value' => $setting_default_value,
            ),
          ),
        ),
      ),
      'anonymous_posting_setting_type' => array(
        '#type' => 'radios',
        '#title' => t('Anonymous %ntype posting', array('%ntype' => $form['#node_type']->name)),
        '#default_value' => $setting_default_value,
        '#options' => $setting_options,
      )
    );
  }
}

/**
 * Implements template_preprocess_username(&$variables).
 *
 * The purpose is to override the original 'anonymous' string with the anonymous
 * user submitted value.
 */
function anonymous_posting_preprocess_username(&$variables) {
  $account = $variables['account'];
  if (property_exists($account, 'type') && _anonymous_posting_activated($account->type) && $account->uid == 0) {
    $field = field_info_field(ANONYMOUS_POSTING_FIELD_NAME);
    if ($field) {

      // get field table and columns name:
      $table = key($field['storage']['details']['sql'][FIELD_LOAD_CURRENT]);
      $columns = current($field['storage']['details']['sql'][FIELD_LOAD_CURRENT]);

      // get field data values:
      $result = db_query('SELECT'
        . ' t.' . $columns['name'] . ', t.' . $columns['mail'] . ', t.' . $columns['homepage']
        . ' FROM {' . $table . '} t'
        . ' WHERE t.entity_id = :nid', array(':nid' => $account->nid));
      foreach ($result as $record) {
        $name = check_plain($record->{ANONYMOUS_POSTING_FIELD_NAME . '_name'});
        $mail = check_plain($record->{ANONYMOUS_POSTING_FIELD_NAME . '_mail'});
        $homepage = check_plain($record->{ANONYMOUS_POSTING_FIELD_NAME . '_homepage'});

        // alter view values:
        if ($name) {
          $variables['name'] = $name;
        }
        if ($homepage) {
          if (!$variables['uid'] || !$variables['profile_access']) {
            // Like the 'class' attribute, the 'rel' attribute can hold a
            // space-separated set of values, so initialize it as an array to make it
            // easier for other preprocess functions to append to it.
            $variables['link_attributes'] = array('rel' => array('nofollow'));
            $variables['link_path'] = $homepage;
            $variables['homepage'] = $homepage;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function anonymous_posting_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node'])) {
    if ($form_id == $form['#node']->type . '_node_form' && _anonymous_posting_activated($form['#node']->type)) {

      // Put the anonymous author fields on top of the subject field.
      if (user_is_anonymous()) {
        $form[ANONYMOUS_POSTING_FIELD_NAME]['#weight'] = $form['title']['#weight'] - 1;
      }
    }
  }
}

/**
 * Tell if a given node type has the Anonymous Posting feature enabled.
 */
function _anonymous_posting_activated($node_type) {
  return in_array($node_type, variable_get('anonymous_posting_enabled_node_types', array()));
}
