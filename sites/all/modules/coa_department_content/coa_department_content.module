<?php

/** HARD CODED MODULE GLOBALS
 * These are the various taxonomies and their vocab id.
 */
    global $DEPT_TAX;
    global $DEBUGGING2;
    global $VIEWS;
    
    $DEBUGGING2 = TRUE;
    $DEPT_TAX = array('vid' => 15, 'machine_name' => 'department', 'name' => '== Departments ==');
    $VIEWS = array(
             'News' => 'view1',
             'Photo Gallery' => 'view1',
             'Video Gallery' => 'view1',
             'Blog' => 'view1',
             'Forum' => 'view1',
            );
/**
* Implementation of hook_permission()
* Adds permission to edit Department Home Page restrictions
*/
function coa_department_content_permission() {
    return array(
			'modify department restrictions' => array( 
                'title'       => t('Modify Department Page Restrictions'),
				'description' => t('Allow user to view and modify Department Home Page content restrictions'),
             )
     );
}


/**
* Implementation of hook_form_alter().	
* This modifies the default edit form of each moderated content type.
* A new case will need to be created for each content type that will be located by the primary site taxonomies.
*/
function coa_department_content_form_alter(&$form, $form_state, $form_id) {
   global $DEBUGGING2;
   // a switch is used because you may want to alter more than
   // one form and it is easy to add a new case for each form.
   switch ($form_id) {
     // This is our form ID.
     case 'department_node_form':
     	  // If user doesn't have permission to modify verification restrictions hide the block.
     	  if (!user_access('modify department restrictions')) {
     	    $form['field_dept_chars']['#type']    = 'hidden';
     	    $form['field_dept_features']['#type'] = 'hidden';
     	  };
		  
		  /*
		  
		  $form['workbench_access']['workbench_access_id']['#ajax'] = array(
		                            // 'callback' is a function that will be called when this element changes.
      								'callback' => 'coa_department_content_update_title_callback',
		                             // 'wrapper' is the HTML id of the page element that will be replaced.
      								'wrapper' => 'replace_title_div',
		                            'method' => 'fade',
		                          );
		   
		  $form['title']         = array(
    								'#type' => 'textfield',
    								'#title' => t("Department or Program Name!"),
		                            '#required' => TRUE,
		                            '#maxlength' => 255,
		                            '#weight' => -5,
		                            '#default_value' => isset($form_state['values']['title']) ? $form_state['values']['title'] : '',                          
		                            // The prefix/suffix provide the div that we're replacing, named by
		                            // #ajax['wrapper'] above.
    								'#prefix' => '<div id="replace_title_div">',
    								'#suffix' => '</div>',
		                          );	
			*/
		  $form['#validate'][] = '_coa_department_content_validate';
		  //$form['#submit'][] = 'coa_department_content_node_form_submit';
		  //$form['actions']['submit']['#submit'][] = 'coa_department_content_node_form_submit';
		  
		  if($DEBUGGING2) dpm($form, "form");
		  //dpm($form, "form");		   
      break; 
    };
};

/**
 * 
 */
function coa_department_content_update_title_callback($form, $form_state){
		  // An AJAX request calls the form builder function for every change.
		  // We can change how we build the form based on $form_state.
		  if (!empty($form_state['values']['workbench_access_id'])) {
		      $value = $form_state['values']['workbench_access_id'][0];
		      $form['title']         = array(
    								'#type' => 'textfield',
    								'#title' => t("Department or Program Name!!"),
		                            '#required' => TRUE,
		                            '#maxlength' => 255,
		                            '#weight' => -5,
		                            '#default_value' => 'SAMPLE',
		                            
		                            // The prefix/suffix provide the div that we're replacing, named by
		                            // #ajax['wrapper'] above.
    								'#prefix' => '<div id="replace_title_div">',
    								'#suffix' => '</div>',
		                          );	 
		        //$form['title']['#default_value'] = $form_state['values']['workbench_access_id'][0];
		        dpm($value, 'value');
		  }        
}
  
/**
* Validate the node edit form.
*/
function _coa_department_content_validate($form, &$form_state) {
    
    //get the limits
    $char_limit = $form_state['values']['field_dept_chars']['en'][0]['value'];
    $feature_limit = $form_state['values']['field_dept_features']['en'][0]['value'];
    // get the number of features
    $features = $form_state['values']['field_dept_features_list']['en'];
    $num_features = count($features);
    
    if ($num_features > $feature_limit) {
  	      $msg = t("You have selected $num_features features which exceeds the feature limit of $feature_limit.  Please reduce the number of features, or contact PIO to have your feature limit increased.");
  	      form_set_error('field_dept_features_list', $msg);
   	      };
    
    //get the number of characters
    $body = $form_state['values']['body']['en'][0]['value'];
    $num_char = strlen(strip_tags($body));
    
    /*
    $num_messages = 0;
    $num_char2 = 0;
    */
    
    $messages = $form_state['values']['field_dept_message']['en'];
    $num_messages = count($messages) - 1;  // get rid of the add new
    
    foreach ($messages as &$message) {
          $value = $message['value'];
          $num_char2 = $num_char2 + strlen(strip_tags($value));
          };
    
   $total_num_char = $num_char + $num_char2;

    if ($total_num_char > $char_limit) {
  	      $msg = t("You have entered a combined total of $total_num_char characters which exceeds the character limit of $char_limit.  Please reduce the verbosity of either the Mission Statement or Message fields, or contact PIO to have your character limit increased.");
  	      form_set_error('body', $msg);
   	      };
    
    
    if($DEBUGGING2) {
      $msg = t("Body =  $body \n");
      $msg .= t("Body =  $num_char characters and $num_messages Message(s) = $num_char2 characters. Total = $total_num_char, Limit = $char_limit . \n");
      $msg .= t("Total Features = $num_features, Feature Limit = $feature_limit"); 
  	
      dpm($features, "Features");
      dpm($messages, "Messages");
      dpm($msg);
      dpm($form_state['values'], 'form_state');
    }
};

/**
* Additional handler for page node form submit.
*/
function coa_department_content_node_form_submit($form, &$form_state) {
  //$form_id = $form->#form_id;
  $form_id = $form['#form_id'];
  
    if($DEBUGGING2)  dpm($form_state['values'], 'form_state');
}

