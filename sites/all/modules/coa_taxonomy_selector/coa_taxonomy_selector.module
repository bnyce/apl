<?php

/**
 * Implementation of hook_menu().
 * Registers a form-based page that you can access at "http://localhost/mypage"
 */

/**
* Implementation of hook_form_alter().	
* This modifies the default edit form of each moderated content type.
* A new case will need to be created for each content type that will be located by the primary site taxonomies.
*/
//function coa_taxonomy_selector_workbench_access_node_element_alter(&$element, $form_state, $active){ 
function coa_taxonomy_selector_form_alter(&$form, $form_state, $form_id) {
   
   // a switch is used because you may want to alter more than
   // one form and it is easy to add a new case for each form.
   switch ($form_id) {
     // This is our form ID.
     case 'page_node_form':
		  $form['workbench_access']['workbench_access_id']['#title'] = t('Editorial Section');
		  $form['workbench_access']['workbench_access_id']['#description'] = t('Select the section(s) for placing this content.  To select multiple sections, hold down the control (ctrl) key on Windows or the command key for Mac.');
		  //$form['workbench_access']['#DANGEROUS_SKIP_CHECK'] = TRUE;	   
		  // array_unshift($form['#validate'], 'coa_taxonomy_selector_node_form_build');

		  $form['field_page_resident']['#type'] = 'hidden';
		  $form['field_bus_tax']['#type'] = 'hidden';
		  $form['field_dev_tax']['#type'] = 'hidden';
		  $form['field_gov_tax']['#type'] = 'hidden';
		  $form['field_env_tax']['#type'] = 'hidden';
		  $form['field_basic_page_department']['#type'] = 'hidden';
		  
		  $form['#validate'] = array('_coa_taxonomy_selector_workbench_access_validate');
		  $form['#submit'][] = 'coa_taxonomy_selector_node_form_submit';
		  $form['actions']['submit']['#submit'][] = 'coa_taxonomy_selector_node_form_submit';
		  
		  //dpm($form, "form");
		  //dpm($form_state, "form_state");				   
      break;
      
     case 'calender_events_node_form':
     case 'calendar_events_node_form':
          $optionarray = array();
          $optionarray = $form['workbench_access']['workbench_access_id']['#options'];
          $optionarray = _coa_taxonomy_selector_calandar_options($optionarray);  //filter the option array
          
       
          $form['workbench_access']['workbench_access_id']['#title'] = t('Department Selection');
		  $form['workbench_access']['workbench_access_id']['#description'] = t('Select the department sponsoring this content.');
		  $form['workbench_access']['workbench_access_id']['#options'] = $optionarray;
          $form['field_calendar_department']['#type'] = 'hidden';
          
          $form['#validate'] = array('_coa_taxonomy_selector_workbench_access_validate');
          $form['#submit'][] = 'coa_taxonomy_selector_node_form_submit';
		  $form['actions']['submit']['#submit'][] = 'coa_taxonomy_selector_node_form_submit';
		  
		  //dpm($form, "form");
     break;
     
     case 'department_mission_node_form':
     case 'department_mission__node_form':
          $optionarray = array();
          $optionarray = $form['workbench_access']['workbench_access_id']['#options'];
          $optionarray = _coa_taxonomy_selector_mission_options($optionarray);  //filter the option array
          
       
          $form['workbench_access']['workbench_access_id']['#title'] = t('Department/Program Selection');
		  $form['workbench_access']['workbench_access_id']['#description'] = t('Select the Department or Program.');
		  $form['workbench_access']['workbench_access_id']['#options'] = $optionarray;
          $form['field_cat_dept']['#type'] = 'hidden';
          
          $form['#validate'] = array('_coa_taxonomy_selector_workbench_access_validate');
          $form['#submit'][] = 'coa_taxonomy_selector_node_form_submit';
		  $form['actions']['submit']['#submit'][] = 'coa_taxonomy_selector_node_form_submit';
		  
		  dpm($form, "form");
     break;  
     
   };
   
};

/**
* Validate the node edit form.
*/
function _coa_taxonomy_selector_workbench_access_validate($form, &$form_state) {
    
    //get the settings for the workbench access section taxonomy
    
	//$sections = array();
	$sections = $form_state['values']['workbench_access_id'];
	if(!is_array($sections)){
	  $message = t("Configuration Error: Please Workbench Access for multiple selection assignments.");
  	      form_set_error('workbench_access_id', $message);
	} else {
	
      foreach ($sections as $section => $key) {
          $term        = taxonomy_term_load($section);    
  	    if (empty($term)) {
  	      $message = t("You have selected a top-level Section Heading. Please be more specific in selecting an Editorial Section.");
  	      form_set_error('workbench_access_id', $message);
   	      };
      };
	};
};

/**
* Additional handler for page node form submit.
*/

function coa_taxonomy_selector_node_form_submit($form, &$form_state) {
  //$form_id = $form->#form_id;
  $form_id = $form['#form_id'];
  
  //create clear arrays
    $dept_tax = array();
    $page_resident = array();
    $bus_tax = array();
    $dev_tax = array();
	$gov_tax = array();
	$env_tax = array();
	$dept_tax = array();
  
  //get the settings for the workbench access section taxonomy
	$sections = array();
	$sections = $form_state['values']['workbench_access_id'];
	
  //cycle over each of the selections and copy values to appropriate section taxonomy 
	foreach ($sections as $section => $key) {
        $term        = taxonomy_term_load($section);
        
	    if (empty($term)) {
	      // shouldn't get here.
	      $message = t("ERROR: Invalid taxonomy. Top-level Section Heading selected.");
	      drupal_set_message($message, 'error', $repeat = FALSE);
	      break 1;
	    };
	    
        $tid         = $term->tid;
        $vid         = $term->vid;
        $name        = $term->name;
        $description = $term->description;
        $format      = $term->format;
        $weight      = $term ->weight;
        $vocab       = $term->vocabulary_machine_name;
        $rdf_mapping = $term->rdf_mapping;
	    
        //$form_state['values']['body']['en']['0']['value'] .= "Section: $section - Vocab: $vid = $vocab : Term: $tid = $name \n ";
        //dd($term);
        switch ($vocab) {
          case "departmental":
          case "department":
            $dept_tax[] = array(
            						'tid'          => $tid,
									'vid'          => $vid,
            						'name'		   => $name,
									'description'  => $description,
									'format'       => $format,
            						'weight'       => $weight,
            						'vocabulary_machine_name' => $vocab,
            						'rdf_mapping'  => $rdf_mapping,
                                    );
            
            break;
          
          case "resident_taxonomy":
            $page_resident[] = array(
            						'tid'          => $tid,
									'vid'          => $vid,
                                    'name'		   => $name,
									'description'  => $description,
									'format'       => $format,
            						'weight'       => $weight,
            						'vocabulary_machine_name' => $vocab,
            						'rdf_mapping'  => $rdf_mapping,
                                    );
            break;
          
          case "government_taxonomy":
                 $gov_tax[] = array(
            						'tid'          => $tid,
									'vid'          => $vid,
                                    'name'		   => $name,
									'description'  => $description,
									'format'       => $format,
            						'weight'       => $weight,
            						'vocabulary_machine_name' => $vocab,
            						'rdf_mapping'  => $rdf_mapping,
                                    );

            break;
            
          case "development_taxonomy":
                 $dev_tax[] = array(
            						'tid'          => $tid,
									'vid'          => $vid,
                                    'name'		   => $name,
									'description'  => $description,
									'format'       => $format,
            						'weight'       => $weight,
            						'vocabulary_machine_name' => $vocab,
            						'rdf_mapping'  => $rdf_mapping,
                                    ); 
            break;
            
          case "environment_taxonomy":
                 $env_tax[] = array(
            						'tid'          => $tid,
									'vid'          => $vid,
									'name'		   => $name,
									'description'  => $description,
									'format'       => $format,
            						'weight'       => $weight,
            						'vocabulary_machine_name' => $vocab,
            						'rdf_mapping'  => $rdf_mapping,
                                    );
            break;
            
          case "business_taxonomy":
          case "business_portal":
                 $bus_tax[] = array(
            						'tid'          => $tid,
									'vid'          => $vid,
                                    'name'		   => $name,
									'description'  => $description,
									'format'       => $format,
            						'weight'       => $weight,
            						'vocabulary_machine_name' => $vocab,
            						'rdf_mapping'  => $rdf_mapping,
                                    );
            break;
             
        };
        
        //next section item
        
      };
      
    // now set the taxonomy values

    
    switch ($form_id) {
      case 'page_node_form':
            // @TODO FIX for some reason the dept taxonomy is not being saved.
            $form_state['values']['field_basic_page_department']['en'] = $dept_tax;
            $form_state['values']['field_page_resident']['en'] = $page_resident;
            $form_state['values']['field_bus_tax']['en'] = $bus_tax;
            $form_state['values']['field_dev_tax']['en'] = $dev_tax;
            $form_state['values']['field_gov_tax']['en'] = $gov_tax;
            $form_state['values']['field_env_tax']['en'] = $env_tax;
            
            //dpr($dep_tax, 'dep_stage');
            //dpr($form_state, 'form_state');
        	
      break;
    
      case 'calender_events_node_form':
      case 'calendar_events_node_form':

            $form_state['values']['field_calendar_department']['en'] = $dep_tax;
            
            // report for debug
            //dpm($form_state, '$form_state');
      break;  
    };
    // dpm($form_state['values'], 'form_state');
}


/**
* Additional handler for node form build.
*/
function coa_taxonomy_selector_node_form_build($form, &$form_state) {
  // debug
  //krumo($form_state);
  //die;
}

/**
 * Utility function to filter "home" from workbench select option array.
 * @param array $optionarray
 */
function _coa_taxonomy_selector_mission_options($optionarray) {
    //$newarray = array();
    // HARD CODED - department vocab is 15.
    $dept_vid = 15;
    // get all the levels
    $x = taxonomy_get_tree($dept_vid, 0);
    // format tree as an option array
    foreach ($x as $o => $key){
      $name  = $key->tid;
      $value = $key->name;
      $deptarray[$name] = $value;
    }

   // clean up so that it is in the same format
   /*
   foreach ($deptarray as $key => $value) {
     $value = trim($value, '-'); 
     $value = trim($value);   
     $trimmedoptions[$key] = $value;
   }
   */
    
   // campare if the key exists in both arrays, if so, add it to trimmedoptions array
   // 
    foreach ($optionarray as $option => $pointer){
        if(array_key_exists($option, $deptarray)){
              //the term exists in both arrays
              $term  = taxonomy_term_load($option);
              $tid         = $term->tid;
              $vid         = $term->vid;
              //$name        = $term->name;
              $name        = $optionarray[$option];
              $vocab       = $term->vocabulary_machine_name;
              $rdf_mapping = $term->rdf_mapping;
              
              //if it is NOT home then add it to common array
              if($name != "-- Home") {
                  $key  = $tid;
                  $value = $name;
                  $common[$key] = $value;
              };
        };
     };
   return $common ;
}

/**
 * Utility function to filter everything except departments from workbench select option array.
 * @param array $optionarray
 */
function _coa_taxonomy_selector_calandar_options($optionarray) {
    //$newarray = array();
    // HARD CODED - department vocab is 15.
    $dept_vid = 15;
    // get only the first level TIDs
    $x = taxonomy_get_tree($dept_vid, 0, 1);
    // format as an option array
    foreach ($x as $o => $key){
      $name  = $key->tid;
      $value = $key->name;
      $deptarray[$name] = $value;
    }
   
   // clean up so that it is in the same format
   foreach ($optionarray as $key => $value) {
     $value = trim($value, '-'); 
     $value = trim($value);   
     $trimmedoptions[$key] = $value;
   }
    
   $common = array_intersect($trimmedoptions,$deptarray);
   /*
    * dpm($optionarray, 'optionarray');
    * dpm($trimmedoptions, 'trimmedoptions');
    * dpm($deptarray, 'deptarray');
    * dpm($common, 'common');
  */
   return $common;
}


