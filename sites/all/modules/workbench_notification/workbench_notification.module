<?php

/**
 * @file
 * Shows how to use the vertical tabs functionality provided by Drupal 7. This
 * example does not cover how to save / load custom setting, and only deals with
 * elements visibility.
 */

/** HARD CODED MODULE GLOBALS
 * 
 */
    global $REVIEWERS;
    global $ROPTIONS;
    global $REVIEW_TEMPLATE;
    global $TEST_TEMPLATE;
    
    $REVIEWERS =  array(
    			'Airport' => array('User' => 'lutherc', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'City Manager' => array('User' => 'siteadmin02', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Planning' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Animal Services' => array('User' => 'siteadmin03', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Austin Energy' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Capital Planning' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Code Compliance' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Communications' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Convention Center' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Courts' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Employment' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'EMS' => array('User' => 'siteadmin04', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Fire' => array('User' => 'siteadmin05', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Health' => array('User' => 'siteadmin06', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Police' => array('User' => 'siteadmin07', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Housing' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Law' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Library' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
                );
                
     $ROPTIONS = array(
                 'lutherc'     => 'lutherc',
                 'florancec' => 'florancec',
                 'vadrevuv' => 'vadrevuv',
                 'drupaladmin' => 'drupaladmin',
                 'esquibelm' => 'esquibelm',
                 'fortej' => 'fortej',
                ); 
                
     $ROPTIONS2 = array(
                 'lutherc'     => 'Airport',
                 'siteadmin02' => 'City Manager',
                 'siteadmin03' => 'Animal Services',
                 'siteadmin04' => 'EMS',
                 'siteadmin05' => 'Fire',
                 'siteadmin06' => 'Health',
                 'siteadmin07' => 'Police',
                ); 
     
     $REVIEW_TEMPLATE = array(
                 'module'	=> 'workbench_notification',
                 'id'		=> 'workbench_notification_approval_request',
     			 'type'     => 'notification',
     			 'method'   => $method,
          		 'priority' => 1, // So it won't be queued
                 'to'		=> NULL,
                 'subject'  => "Approval Request for \"[node:title]\" ",
          		 'header'   => " ",
               	 'content'  => "\n [current-user:name] has requested that you review and approve the following content. \n \n To approve, comment or edit the content, please visit the page at: \n \n [node:url] \n \n  
DO NOT REPLY TO THIS EMAIL - UNATTENDED EMAIL ACCOUNT \n
***** BEGIN *****                        
\n \n

[node:body] 

\n \n 

                  ***** END ***** \n",
                 'footer'   => " ",
                 'headers'	=> array(
                               'From'	        => Null,
                               'Sender'         => NULL,
                               'Return-Path'	=> NULL,
                               ),
                  );
                  
                  
     
/**
 * workbench_notification_message_send($destinations, $message, $method, $queue = 0) 
 * Send message to an array of destinations via the messaging framework.  The message is rendered just once.
 * @param array $destinations
 *   Array of destinations for sending.
 *   The element type depends on sending method so it can be a list of e-mail addresses, user accounts, etc
 * @param array $message
 * The $message array may have the following elements
 *   'subject' => Message subject, may be already rendered or not
 *   'body'    => Message content, may be already rendered or not
 *   'params'  => Optional message params, indexed by sending method group
 *      i.e. params for mail methods will be in $message['params']['mail']
 *   'render' => Optional flag to mark the message subject and body as rendered
 *   'sender' => Optional int to identify message sender, may be $user->uid
 *   'sender_account' => Optional user account to use as message sender
 * @param array $method
 *   Sending method. Unlike for messaging_message_send_user() for which the sending method may be user's default
 *   it is not an optional parameter for this function.
 * @param flag $queue
 *   Optional flag, 0 for normal queueing, 1 to force queueing.
 *   We may want to force queueing for bulk messaging. Otherwise it will depend on the sending method
 *   wether to queue the messages (for pull methods) or not (push methods)
 */     
     
     
/**
 * workbench_notification_menu()
 * Implementation of hook_menu().
 * 
 */
function workbench_notification_menu() {
  $items['workbench_notification'] = array(
    'title' => 'Workbench Notification',
    'description' => 'Provides panel for triggering email notifications',
    'page callback' => '_workbench_notification_explanation',
    'access callback' => 'user_access',
    'access arguments' => array('submit notification requests'),
  );
  

    
  return $items;
}

/**
 * workbench_notification_permission()
 * Implementation of hook_permission()
 * 
 */
function workbench_notification_permission() {
return array(
		'submit notification requests' => array(
                          'title' => t('Submit Workbench Notification Requests'),
                          'description' => t('Allow users to submit notification requests'),
                          ),
                          
        'receive notification requests' => array(
                          'title' => t('Receive Workbench Notification Requests'),
                          'description' => t('Allow users to receive notification requests'),
                          ),

        'access approval form' => array(
                          'title' => t('Access Workbench Notification\'s Approval Form'),
                          'description' => t('Allow users to access one-click approval form.'),
                          ),
        );
};

/**
 * 
 * workbench_notification_approval_form()
 * Defines the approval form
 * Approval Button
 * Comment Button
 * Comment Box
 */
function workbench_notification_approval_form($form_id, &$form_state, $mid = '50') {
  $form['info']    = array(
      '#markup'			=> t('Please review content below, provide any review comments (optional), and click Approve or Comment.'),
      );
  $form['mid']     = array(
		'#type' => 'hidden',
		'#value' => $mid,
      );
  $form['comment'] = array(
      '#title'	        => t('Comments'),
      '#type'	        => 'textarea',
  	  '#cols'           => 40,
      '#rows'           => 3,
      '#resizable' => TRUE,
      );
  $form['approve'] = array(
      '#type'	        => 'submit',
  	  '#value'	        => t('Approve'),
  	  '#submit'         => array('workbench_notification_approval_form_submit'),
  
      );
  $form['add_comment'] = array(
      '#type'	        => 'submit',
  	  '#value'	        => t('Comment'),
      '#submit'         => array('workbench_notification_approval_form_submit'),
      );
  return $form;    
}

/**
 * Implements hook_theme().
 * 
 */
function workbench_notification_theme() {
  return array(
	' workbench_notification_approval_form' => array(
		'render element' => 'form',
		'template' => 'approval-block-form',
        ),
  );
}

/**
* Assign the elements of the form to variables so
* the themer can use those values to control how the
* form elements are displayed, or alternatively
* displaying the whole form as constructed above.
*/
function template_preprocess_workbench_notification_approval_form(&$variables) {
  $variables['workbench_notification_approval_form'] = array();
  $hidden = array();
  // Provide variables named after form keys so themers can print each element independently.
  foreach (element_children($variables['form']) as $key) {
      $type = $variables['form'][$key]['#type'];
      if ($type == 'hidden' || $type == 'token') {
          $hidden[] = drupal_render($variables['form'][$key]);
      }
      else {
      $variables['workbench_notification_approval_form'][$key] = drupal_render($variables['form'][$key]);
      }
  }
  // Hidden form elements have no value to themers. No need for separation.
  $variables['workbench_notification_approval_form']['hidden'] = implode($hidden);
  // Collect all form elements to make it easier to print the whole form.
  $variables['workbench_notification_approval_form_form'] = implode($variables['workbench_notification_approval_form']);
}

/**
 * Implement hook_form_alter().
 *
 * Adds custom fieldset to the node form, and attach ajax behaviour for vertical
 * panels to update the settings description.
 */
function workbench_notification_form_alter(&$form, $form_state, $form_id) {
  global $ROPTIONS;
  
  // Only include on node add/edit forms.
  if (!empty($form['#node_edit_form'])) {
    $form['#submit'][] = workbench_notification_form_submit; // add submit function
    
    $form['workbench_notification'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email Notification'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group' => 'additional_settings',
      // Attach the javascript for vertical tabs.
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'workbench_notification') . '/workbench_notification.js',
        ),
      ),
      '#tree' => TRUE,
      '#weight' => -2,
    );

    // This checkbox is used to show or hide the custom settings form using
    // javascript (altering states of a container defined later).
    $form['workbench_notification']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send Notifications on Save'),
      '#default_value' => FALSE,
    );

    // This container will be used to store the whole form for our custom
    // settings. This way, showing/hidding the form using javascript is easier,
    // as only one element should be set visible.
    $form['workbench_notification']['workbench_notificationcontainer'] = array(
      '#type' => 'container',
      '#parents' => array('workbench_notification'),
      '#states' => array(
        'invisible' => array(
          // If the checkbox is not enabled, show the container.
          'input[name="workbench_notification[enabled]"]' => array('checked' => FALSE),
        ),
      ),
    );


    
    $form['workbench_notification']['workbench_notificationcontainer']['approvers'] = array(
      '#type'          => 'checkboxes',
      '#title'         => t('To:'),
      '#options'       => $ROPTIONS,
      '#default_value' => '',
    );
    
    $form['workbench_notification']['workbench_notificationcontainer']['xtra_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Additional Message:'),
      '#description'    => t('Added to the standard request message.'),
      '#cols'           => 40,
      '#rows'			=> 3,
      'resizable'		=> FALSE,
      '#default_value'  => '',
    );
    
    $due_options = array(0 => "n/a", 1 => "Urgent", 2 => "Date");
    $form['workbench_notification']['workbench_notificationcontainer']['due'] = array(
      '#type'          => 'select',
      '#title'         => t('Due By Flag'),
      '#options'       => $due_options,
      '#default_value' => FALSE,
    );
    
    $form['workbench_notification']['workbench_container2'] = array(
      '#type' => 'container',
      '#parents' => array('workbench_notification'),
      '#states' => array(
        'visible' => array(
          // If the checkbox is not enabled, show the container.
          ':input[name="workbench_notification[due]"]' => array('value' => '2'),    
          ),
      ),
    );
    
    $form['workbench_notification']['workbench_container2']['date'] = array(
	  '#title'         => t('Due by COB on'),
	  '#type'          => 'date',
	  '#default_value' => array(
						'month' => format_date(time(), 'custom', 'n'),
						'day' => format_date(time(), 'custom', 'j'),
						'year' => format_date(time(), 'custom', 'Y'),
                        ),
     );
   
  };
  dpm($form, "form");
  //dpm($form_state, "form_state");
};

/**
 * workbench_notification_approval_form_submit_approval()
 * Submit for one-click approval
 * @param array $form
 * @param array $form_state
 */
function workbench_notification_approval_form_submit($form, &$form_state){
      global $user;
      global $node;
      
      $logtext = '';
      
      $mid = $form_state['values']['mid']; //Get message id from form.
      $name = $user->name;
      
      if($form_state['clicked_button']['#value'] == 'Approve'){
        // if the user clicks the approval button set approval flag to 2 (approved)   
        $userstatus  = 2; // approved
        $logtext = "APPROVED by $name. ";
      } else {
        $userstatus = 1; // only left comment  
      }; 
      
      //$recipients[$name] = array('status' => $userstatus);
      $recipients[$user->name] = array('uid' =>  $user->uid, 'mail' => $user->mail, 'status' => $userstatus, 'time' => time());     
      
      // update the notification message object
      //TODO check to see if all requestors have approved and then update  $record->status = 2 (all approved).
      $msgstatus = 0;
      // update message db 
      $query = db_update('workbench_notification')
              ->fields(array(
               'status'		 => $msgstatus,
			   'recipients'	 => serialize($recipients),
              ))
              ->condition('mid', $mid)
              ->execute();
                             
      // get any revision comments added using the approval form
      $logtext .= $form_state['values']['comment'];      
      
      
      // load node, create new revision, add log comment and save.
      node_load($nid);
      $node->revision = 1;//create new revision
      $node->log = $logtext;
      node_save($node);
      
      dpm($form_state, 'form_state');
}


/**
 * workbench_notification_form_submit($form, &$form_state)
 * Performs notification functions at save.
 * @param array $form
 * @param array $form_state
 */
function workbench_notification_form_submit($form, &$form_state) {
  global $REVIEW_TEMPLATE;
  global $TEST_TEMPLATE;
  global $user;
  global $node;
  
  $recipients = array(); // create empty recipents array
  
  if (empty($node)) {
    // $node = $entity;
    if (arg(0)=='node' && is_numeric(arg(1)))
      {
        $nodeId = arg(1);
        $node = node_load($nodeId);
      };
  };
  

    
  $values = $form_state['values'];
  dpm($values, "values");
  
  $addresses = $form_state['values']['workbench_notification']['approvers']; 
  $addresses = array_filter($addresses); // filter out empty options
  //dpm($addresses, "addresses");
  dpm($user, "user");
  dpm($node, "node");
  
  //create an array of objects keyed to the token type they correspond to.
  $data = array('node' => $node, 'user' => $user);
    
  $v = $form_state['values']['workbench_notification']['enabled']; 
  if($v){
        $successful = null;
        $unsuccessful = null;
        $mtext = null;
        $template = $REVIEW_TEMPLATE;
        
        
        //discover any message modifiers
        $m = $form_state['values']['workbench_notification']['due'];
        switch ($m) {
          case 1:
            $mtext = t("URGENT: ");
            break;

          case 2:
            $hour = "";
            $second = "";
            $day = $form_state['values']['workbench_notification']['date']['day'];
            $month = $form_state['values']['workbench_notification']['date']['month'];
            $year = $form_state['values']['workbench_notification']['date']['year'];
            //$stamp = mktime($hour, $minute, $second, $month, $day, $year);
            $stamp = strtotime("$year-$month-$day");
            $dtext = format_date($stamp, 'custom', 'D, M j Y');
            $mtext = "DUE COB: $dtext - ";
            break;
        }; 
        // modify template
        
        $subject =  $template['subject'];
        $subject =  $mtext . token_replace($subject, $data);
        $template['subject'] = $subject;
        
        $body =  $template['content'];
        $xtra_msg = $form_state['values']['workbench_notification']['xtra_message'];
        $body =  "\n $xtra_msg \n $body \n";
        $body =  token_replace($body, $data);
        $template['content'] = $body;
        
        
        
        foreach($addresses as $address){
          
            $message = messaging_message_build($template);
            $send_method = messaging_send_method($method);
             
            if ($account = user_load_by_name($address)) {
              dpm($account, "account");
              $vars['!name'] = theme('username', array('account' => $account));
              $message->set_user($account);
              if ($dest = $message->get_destinations()) {
                $destination = reset($dest);
                // drupal_set_message(t('Found address @address for user !name', array('@address' => $destination->format('long')) + $vars));
                $result = $message->send();
                $recipients[$account->name] = array('uid' =>  $account->uid, 'mail' => $account->mail, 'status' => 0);     
                }
                else {
                drupal_set_message(t('Cannot find a valid address for user !name', $vars), 'error');
                }
              
              } elseif ($destination = $send_method->address_destination($address, TRUE)) {
                $result = $message->add_destination($destination)->send();
                drupal_set_message(t('Sent message to: @address', array('@address' => $address)));
                $recipients[] = $address;
              }
            else {
                drupal_set_message(t('The destination @address is not a user name nor a valid address.', array('@address' => $address)), 'error');
                };
                
            if (isset($result)) {
                if ($result) {
                  $successful .= "$address, ";
                  //drupal_set_message(t('A message was successfully sent to @address.', array('@address' => $address)));
                }
                else {
                  //drupal_set_message(t('The message sending failed.'), 'warning');
                  $unsuccessful .= "$address, ";
                  }
                }
            }
            
            
            
            // Check some conditions and let the user know
            if (!$send_method->enabled) {
                dpm($send_method, "send_method");
                $msg = t('This sending method is disabled, thus regular messages will be discarded.');
                drupal_set_message($msg, 'warning');
            };
            
            if (!$unsuccessful == null) {
              $msg = t('Message unsuccessful for: @unsuccessful.', array('@subject' => $REVIEW_TEMPLATE['subject'], '@unsuccessful' => $unsuccessful));
              drupal_set_message($msg, 'warning');
              };
            
            if (!$successful == null) {
              $msg = t('Message <b>@subject</b> was successfully sent to: @successful.', array('@subject' => $template['subject'], '@successful' => $successful));
              drupal_set_message($msg);
              
              
              //$msgarray            = array('subject' => $subject, 'body' => $body);
              $table = 'workbench_notification';
              
              $record = new stdClass();
              $record->entity_id   = $node->nid;
              $record->status      = 0;
              $record->message     = $subject;
              $record->time        = time();
              $record->sender      = $user->uid;
              $record->name        = $user->name;
              $record->recipients  = $recipients; // $recipients[$address] = array('uid' =>  $account->uid, 'mail' => $account->mail, 'status' => 0);   
              $record->log         = $msg;
              
                if ($record->mid) {
                  // if this is a new entry, specify table's primary key
                  drupal_write_record($table, $record, array('mid'));
                }
                else {
                  drupal_write_record($table, $record);
                  // $my_data->id is now set
                };
              };      
    };
};

/**
 * Simple explanation page.
 */
function _workbench_notification_explanation() {
  return t("Workbench Notification provides light-weight notification framework");
}

/**
* Implements hook_entity_info().
*/
function workbench_notification_entity_info() {
  return array(
    'workbench_notification' => array(
      'label' => t('Test Entity'),
      'entity class' => 'Entity',
      'controller class' => 'EntityAPIController',
      'base table' => 'workbench_notification',
      'entity keys' => array(
        'mid'       => 'mid',
        'entity_id' => 'entity_id', 
        'sender'    => 'sender',
      ),
      // Make use the class' label() and uri() implementation by default.
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
    ),
  );
}

// TRIGGERS AND EVENTS
/**
* Implementation of hook_trigger_info().
* We call hook_trigger_info when we are defining the triggers we provide.
* Triggers are the events that make fire any number of assigned actions.
*/
function workbench_notification_trigger_info() {
return array(
	'workbench_notification' => array(
			'workbench_notification_insert' => array(
				'label' => t('A new workbench notification message has been sent.'),
                 ),
             ),
     );
}

/**
 * Implementation of hook_node_insert(). (new for D7)
 */
function workbench_notification_node_insert($node) {  
      module_invoke_all('notification'); // likely need to change this to recognize a new notification which uses entity.

}

/**
 * Implementation of hook_hook_info().
 * This describes an action for triggers to respond to
 */
/* NOT NEEDED?
function workbench_notification_hook_info() {
  return array(
    'workbench_notification' => array(
      		'workbench_notification' => array(
        			'insert' => array(
  							'runs when' => t('Notification request is generated.'),
                      ),
            ),
     ),
  );
}
*/



/**
 * Implementation of hook_script().
 */
function workbench_notification_script($op, $node) {
  $aids = _trigger_get_hook_aids('notification', $op);
  $context = array(
    'hook' => 'notification',
    'op' => $op,
    'node' => $node,
  );
  actions_do(array_keys($aids), $node, $context);
}



// APPROVAL BLOCK
 

/**
 * 
 * Implementation of hook_block_info()
 * 
 */
function workbench_notification_block_info() {
  $blocks['approval-block'] = array(
    'info'        => t('Workbench Notificaiton One-Click Approval Form'),
    'status'      => TRUE,
    'region'      => 'above_content',
    'visability'  => 'BLOCK_VISIBILITY_LISTED',  // or BLOCK_VISIBILITY_PHP
    'pages'		  => 'nothing/*', // why isn't working?
  );
  return $blocks;
}
 
/**
 * Implementation of hook_block_view().
 */
function workbench_notification_block_view($delta='') {
  global $node;
  global $user;
  
  $nid = 0;
  $name = $user->name;
  
  if (arg(0) == 'node' && ctype_digit(arg(1))) {
    $node = node_load(arg(1));
    $nid = $node->nid;
  };
  
  dpm($node, 'node');
  
  $block = array();
  switch ($delta) {
    case 'approval-block':
      // Does message exist for this content?
      $result = workbench_notification_message_exists($nid);
     
      dpm($result, 'RESULT');
      $recipients = unserialize($result['recipients']);
      dpm($recipients, 'recipients');
      $userstatus = $result['recipients'][$name]->status;
      dpm($userstatus, 'userstatus');
       
     
      if($result != FALSE){  // if a message exists
        
        $userstatus = $result['recipients']; 

        if (user_access('access approval form') && ($result->status != 2)){
          //$block['subject'] = t('One-Click Approval Form');
          if ($userstatus == 2) { // this recipient has already approved this content
            $subject = $result['message'];
            $date = format_date($result['recipients']['lutherc']['time'],'custom','g:i a \o\n F j, Y');
            $text = "At $date you approved the content.";
            $block['content'] = $text;
          } 
          elseif ($result['sender'] == $user->uid) { // this is the sender.
            $subject = $result['message'];
            $date = format_date($result['time'],'custom','g:i a \o\n F j, Y');
            $recipients =  implode(", ",array_keys(unserialize($result['recipients'])));
            $text = "At $date you sent the message <b> $subject </b> to: $recipients .";
            $block['content'] = $text;
          } 
          else { // this is a recipient who hasn't already approved content.
            $mid = $result['mid'];
            $block['content'] = workbench_notification_contents($mid);
            
          }
        }
      }
      break;
  }
  return $block;
}
 
/**
 * custom html block
 * @return string
 */
function workbench_notification_contents($mid) {
  return drupal_get_form('workbench_notification_approval_form', $mid);
}

/**
 * workbench_notification_message_exists($nid = '')
 * For a given node id does a workbench notification message exist?
 * @param text $nid
 */
function workbench_notification_message_exists($nid = '') {
   //$result = false;
   //$nid = '1560';
   /*
   $query = db_select('workbench_notification', 'wn');
   
   $query
     ->condition('wn.entity_id', '1520')
     ->fields('wn', array('status', 'message', 'time', 'sender', 'recipients'));
     
   $result = $query->execute();  
   */
   $result = db_query('SELECT wn.mid, wn.entity_id, wn.status, wn.message, wn.time, wn.sender, wn.name, wn.recipients 
                              FROM {workbench_notification} wn 
                              WHERE wn.entity_id = :nid', 
                              array(':nid' => $nid,));
   return $result->fetchAssoc();
};
