<?php

/**
 * @file
 * Shows how to use the vertical tabs functionality provided by Drupal 7. This
 * example does not cover how to save / load custom setting, and only deals with
 * elements visibility.
 */

/** HARD CODED MODULE GLOBALS
 * 
 */
    global $REVIEWERS;
    global $ROPTIONS;
    global $REVIEW_TEMPLATE;
    
    $REVIEWERS =  array(
    			'Airport' => array('User' => 'lutherc', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'City Manager' => array('User' => 'siteadmin02', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Planning' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Animal Services' => array('User' => 'siteadmin03', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Austin Energy' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Capital Planning' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Code Compliance' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Communications' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Convention Center' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Courts' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Employment' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'EMS' => array('User' => 'siteadmin04', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Fire' => array('User' => 'siteadmin05', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Health' => array('User' => 'siteadmin06', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Police' => array('User' => 'siteadmin07', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Housing' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Law' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
    			'Library' => array('User' => 'username', 'Name' => 'person', 'Email' => 'person@austin.ci.tx.us'),
                );
                
     $ROPTIONS = array(
                 'lutherc' => 'Airport',
                 'siteadmin02' => 'City Manager',
                 'siteadmin03' => 'Animal Services',
                 'siteadmin04' => 'EMS',
                 'siteadmin05' => 'Fire',
                 'siteadmin06' => 'Health',
                 'siteadmin07' => 'Police',
                ); 
     
     $REVIEW_TEMPLATE = array(
                 'subject' => "Review Message Subject Test",
                 'body'    => "Review Message Body Text Yada Yada Yada",     
     );
     
/**
 * workbench_notification_message_send($destinations, $message, $method, $queue = 0) 
 * Send message to an array of destinations via the messaging framework.  The message is rendered just once.
 * @param array $destinations
 *   Array of destinations for sending.
 *   The element type depends on sending method so it can be a list of e-mail addresses, user accounts, etc
 * @param array $message
 * The $message array may have the following elements
 *   'subject' => Message subject, may be already rendered or not
 *   'body'    => Message content, may be already rendered or not
 *   'params'  => Optional message params, indexed by sending method group
 *      i.e. params for mail methods will be in $message['params']['mail']
 *   'render' => Optional flag to mark the message subject and body as rendered
 *   'sender' => Optional int to identify message sender, may be $user->uid
 *   'sender_account' => Optional user account to use as message sender
 * @param array $method
 *   Sending method. Unlike for messaging_message_send_user() for which the sending method may be user's default
 *   it is not an optional parameter for this function.
 * @param flag $queue
 *   Optional flag, 0 for normal queueing, 1 to force queueing.
 *   We may want to force queueing for bulk messaging. Otherwise it will depend on the sending method
 *   wether to queue the messages (for pull methods) or not (push methods)
 */     
     
     
/**
 * Implements hook_menu for a simple explanation page.
 */
function workbench_notification_menu() {
  $items['workbench_notification'] = array(
    'title' => 'Workbench Notification',
    'description' => 'Provides panel for triggering email notifications',
    'page callback' => '_workbench_notification_explanation',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implement hook_form_alter().
 *
 * Adds custom fieldset to the node form, and attach ajax behaviour for vertical
 * panels to update the settings description.
 */
function workbench_notification_form_alter(&$form, $form_state, $form_id) {
  global $ROPTIONS;
  
  // Only include on node add/edit forms.
  if (!empty($form['#node_edit_form'])) {
    $form['#submit'][] = workbench_notification_form_submit;
    
    $form['workbench_notification'] = array(
      '#type' => 'fieldset',
      '#title' => t('Email Notification'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      // The #group value must match the name of the vertical tabs element.
      // In most cases, this is 'additional_settings'.
      '#group' => 'additional_settings',
      // Attach the javascript for vertical tabs.
      '#attached' => array(
        'js' => array(
          'vertical-tabs' => drupal_get_path('module', 'workbench_notification') . '/workbench_notification.js',
        ),
      ),
      '#tree' => TRUE,
      '#weight' => -2,
    );

    // This checkbox is used to show or hide the custom settings form using
    // javascript (altering states of a container defined later).
    $form['workbench_notification']['enabled'] = array(
      '#type' => 'checkbox',
      '#title' => t('Send Notifications on Save'),
      '#default_value' => FALSE,
    );

    // This container will be used to store the whole form for our custom
    // settings. This way, showing/hidding the form using javascript is easier,
    // as only one element should be set visible.
    $form['workbench_notification']['workbench_notificationcontainer'] = array(
      '#type' => 'container',
      '#parents' => array('workbench_notification'),
      '#states' => array(
        'invisible' => array(
          // If the checkbox is not enabled, show the container.
          'input[name="workbench_notification[enabled]"]' => array('checked' => FALSE),
        ),
      ),
    );


    
    $form['workbench_notification']['workbench_notificationcontainer']['approvers'] = array(
      '#type'          => 'checkboxes',
      '#title'         => t('To:'),
      '#options'       => $ROPTIONS,
      '#default_value' => '',
    );
    
    $form['workbench_notification']['workbench_notificationcontainer']['xtra_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Additional Message:'),
      '#description'    => t('Added to the standard request message.'),
      '#cols'           => 40,
      '#rows'			=> 3,
      'resizable'		=> FALSE,
      '#default_value'  => '',
    );
    
    $due_options = array("n/a", "Urgent", "Date");
    $form['workbench_notification']['workbench_notificationcontainer']['due'] = array(
      '#type'          => 'select',
      '#title'         => t('Flag'),
      '#options'       => $due_options,
      '#default_value' => FALSE,
    );
    
    $form['workbench_notification']['workbench_notificationcontainer']['date'] = array(
	  '#title'         => t('Due By Date'),
	  '#type'          => 'date',
	  '#default_value' => array(
						'month' => format_date(time(), 'custom', 'n'),
						'day' => format_date(time(), 'custom', 'j'),
						'year' => format_date(time(), 'custom', 'Y'),
                        ),
   );
  };
  dpm($form, "form");
};

/**
 * workbench_notification_form_submit($form, &$form_state)
 * Performs notification functions at save.
 * @param array $form
 * @param array $form_state
 */
function workbench_notification_form_submit($form, &$form_state) {
  global $REVIEW_TEMPLATE;
  global $user;
  
  
  $module = 'workbench_notification';
  $key = 'key';
  $language = language_default();
  $params = array();
  $from = NULL;
  $send = FALSE;
  $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);

  $message['subject'] = $subject;
  $message['body'] = array();
  $message['body'][] = $line1;
  
    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);

    // Format the message body.
    $message = $system->format($message);

    // Send e-mail.
    $message['result'] = $system->mail($message);
  
  $v = $form_state['values']['workbench_notification']['enabled']; 
  if($v){
        // Convert body in array of lines
        $body = "this is the body";
        $method = "mail";
      
        $message = messaging_message_build(array(
          'type' => 'test',
          'subject' => "Test Message",
          'header' => "Header Text",
          'content' => $body,
          'footer' => "footer text",
          'method' => $method,
          'priority' => 1, // So it won't be queued
        ));
        
        // Destination may be account or plain parameter/s
        $address = array('lutherc');
        $send_method = messaging_send_method($method);
        
        if ($account = user_load_by_name($address)) {
          $vars['!name'] = theme('username', array('account' => $account));
          $message->set_user($account);
          if ($dest = $message->get_destinations()) {
            $destination = reset($dest);
            drupal_set_message(t('Found address @address for user !name', array('@address' => $destination->format('long')) + $vars));
            $result = $message->send();
            }
            else {
            drupal_set_message(t('Cannot find a valid address for user !name', $vars), 'error');
            }
          
          } elseif ($destination = $send_method->address_destination($address, TRUE)) {
            drupal_set_message(t('Sending message to address: @address', array('@address' => $address)));
            $result = $message->add_destination($destination)->send();
          }
        else {
            drupal_set_message(t('The destination is not a user name nor a valid address.'), 'error');
            };
            
        if (isset($result)) {
            if ($result) {
              drupal_set_message(t('The message was sent successfully.'));
            }
            else {
              drupal_set_message(t('The message sending failed.'), 'warning');
              }
            }
        // Check some conditions and let the user know
        if (!$send_method->enabled) {
            drupal_set_message(t('This sending method is disabled, thus regular messages will be discarded.'), 'warning');
          }
        }
        dpm($message, 'message');
    };

/**
 * Simple explanation page.
 */
function _workbench_notification_explanation() {
  return t("Workbench Notification provides light-weight notification framework");
}




// TRIGGERS AND EVENTS

/**
 * Implementation of hook_hook_info().
 * This describes an action for triggers to respond to
 */
function workbench_notification_hook_info() {
  return array(
    'workbench_notification' => array(
      		'workbench_notification' => array(
        			'insert' => array(
  							'runs when' => t('Notification request is generated.'),
                      ),
            ),
     ),
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function workbench_notification_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'insert':
      module_invoke_all('notification', 'insert', $node); // likely need to change this to recognize a new notification which uses entity.
      break;
  }
}

/**
 * Implementation of hook_script().
 */
function workbench_notification_script($op, $node) {
  $aids = _trigger_get_hook_aids('notification', $op);
  $context = array(
    'hook' => 'notification',
    'op' => $op,
    'node' => $node,
  );
  actions_do(array_keys($aids), $node, $context);
}

