/**
 * @file
 * Positioning for responsive layout .
 *
 * Define CSS classes to create a table-free, 3-column, 2-column, or single
 * column layout depending on whether blocks are enabled in the left or right
 * columns.
 *
 * This layout uses the Zen Grids plugin for Compass: http://zengrids.com
 */

@import "base";
@import "colors";

@mixin coa_menu_hide {
	$zen-column-count: 3;
	#coa-menu {
		display: none;
		max-height: 0;
	}	
}
@mixin panel_col_last_hide {
	#content .panel-2col div.panel-col-first {
		@include zen-grid-item(3, 1);
	}
	div.panel-col-last {
		visibility: hidden !important;
		div.inside,
		div#email_render {
			visibility: hidden !important;
		}	
	}
}

@mixin layout_small {
	@include coa_menu_hide;
	@include panel_col_last_hide;
}

@mixin layout_medium_wide {
	@include coa_menu_hide;
	@include panel_col_last_hide;
}

$zen-column-count:  5;
$zen-gutter-width:  20px;


// IE6-7 don't support box-sizing: border-box. We can fix this in 1 of 3 ways:
// - Drop support for IE 6/7. :-) In the _base.scss, set $legacy-support-for-ie6
//   and $legacy-support-for-ie7 to false.
// - (Preferred) Install the box-sizing polyfill and set the variable below to
//   the absolute path URL to the boxsizing.htc file.
//   @see https://github.com/Schepp/box-sizing-polyfill
//   $box-sizing-polyfill-path: "/path/to/boxsizing.htc";
// - Use the same CSS unit for grid width and gutter width (use px for both or
//   use % for both, etc.) and set the box-sizing variable to content-box.
//   $zen-box-sizing: content-box;


// You can generate more efficient CSS if you manually apply the
// zen-grid-item-base mixin to all grid items from within a single ruleset.
$zen-auto-include-item-base: false;
// $zen-auto-include-flow-item-base: false;


#page {
	padding: 10px;
}
/*
 * Center the page.
 */

#page,
.region-bottom {
  /* For screen sizes larger than 1200px, prevent excessively long lines of text
     by setting a max-width. */
  margin-left: auto;
  margin-right: auto;
  max-width: $width;
}

/*
 * Apply the shared properties of grid items in a single, efficient ruleset.
 */
// See the note about $zen-auto-include-item-base above.

#coa-menu,
#apl-menu,
#header,
#page,
#navigation,
.region-sidebar-first,
.region-sidebar-second,
#footer {
  @include zen-grid-item-base();
}

/*
 * Containers for grid items and flow items.
 */

#coa-menu,
#apl-menu,
#header,
#page,
#main2,
#footer {
  @include zen-grid-container();
}

@media all and (max-width: 899px) { // small
	@include layout_small;
}
/*
@media all and (min-width: 900px) {
	#coa-menu {
    		width: $zen-grid-width;
	}	
	#main {
		position: relative;
	}
}
*/
@media all and (min-width: 900px) and (max-width: 959px) { // medium wide
	@include layout_medium_wide;
}
 
@media all and (min-width: 960px) { // very wide
  $zen-column-count: 5;

	#coa-menu {
    		width: $zen-grid-width;
	}	
	#content {
		div.panel-col-first {
			@include zen-grid-item(3, 1);
		}
		div.panel-col-last {
			@include zen-grid-item(2, 4);
		}
	}
}
